#!/usr/bin/python3
import subprocess
import argparse
import time
import sys
import os

def main():
	args = parse_args()

	just_size = 60
	socket_path = os.path.join(args.folder,"docker_sync_ssh_socket")

	print("Connecting to %s."%args.remote)
	master, output = create_master_connection(args.remote, socket_path)
	if output is not None:
		print("Ssh connection failed.")
		sys.exit(1)

	print(("Listing %s images"%(args.remote)).ljust(just_size,"."), end="", flush=True)
	remote_images = get_remote_images(args.remote, socket_path);
	check(remote_images)

	print("Listing local images".ljust(just_size,"."), end="", flush=True)
	local_images = get_local_images();
	check(local_images)

	new, need_update, current = partition_images(remote_images, local_images)

	print("\n--> Report:\n")
	print("current:", current)
	print("need update:", need_update)
	print("new:", new)
	#end the program if only asked for the report
	if args.report or (not args.all and not args.update and not args.new and len(args.images)==0) : return 0

	if len(new)+len(need_update)==0:
		print("\nEverything is up to date.")
		sys.exit(0)

	update_set = set(args.images)
	if args.all:
		update_set = set(need_update).union(new);
	else:
		if args.update:
			update_set = update_set.union(set(need_update))
		if args.new:
			update_set = update_set.union(set(new))

	for name_tag in update_set:
		if len(args.images)==0 or name_tag in args.images:

			is_new = name_tag in new
			file_name = "./%s_%s_sync_temp.tar.gz"%(name_tag.replace(":","_"), str(time.time()).replace(".",""))

			if is_new:
				print("\n--> Importing '%s':\n"%name_tag)

				print("Getting remote image ancestors".ljust(just_size,"."), end="", flush=True)
				remote_family = get_image_parents(name_tag,args.remote, socket_path)
				check(remote_family)

				print("Searching all local images".ljust(just_size,"."), end="", flush=True)
				all_local = get_all_images()
				check(all_local)

				common_parent = get_common_parent(remote_family,all_local)
				if common_parent:
					print("Found common parent: %s"%common_parent[:20])
					print("Dumping local parent".ljust(just_size,"."), end="", flush=True)
					_, output = execute("docker save -o %s %s"%(file_name, common_parent))
					check(output)
				else:
					print("Unable to find a common parent. Importing full image.")
			else:
				print("\n--> Updating '%s':\n"%name_tag)
				print("Dumping local image".ljust(just_size,"."), end="", flush=True)
				_, output = execute("docker save -o %s %s"%(file_name, name_tag))
				check(output)

			print("Dumping remote image".ljust(just_size,"."), end="", flush=True)
			_, output = execute(["ssh", args.remote, "-o", "ControlPath=%s"%socket_path, "docker", "save", "-o", file_name, name_tag])
			check(output)

			print("Starting rsync connection.",end='\n\n')
			_, output = execute(["rsync", "-e", "ssh -o \"ControlPath=%s\""%socket_path, "-vhz", "--progress", "%s:%s"%(args.remote,file_name), file_name], True)
			check(output)

			print("Removing remote temporal file".ljust(just_size,"."), end="", flush=True)
			_, output = execute(["ssh", args.remote, "-o", "ControlPath=%s"%socket_path, "rm", file_name])
			check(output)

			print("Loading new image".ljust(just_size,"."), end="", flush=True)
			_, output = execute("docker load -i %s"%(file_name))
			check(output)

			print("Removing local temporal file".ljust(just_size,"."), end="", flush=True)
			_, output = execute("rm %s"%file_name)
			check(output)

	master.stdin.close()
	master.terminate()

	return

def create_master_connection(remote, socket_path):
	message ="__ds-connected__"
	p = subprocess.Popen(["ssh", remote, "-o", "ControlMaster=yes", "-o", "ControlPath=%s"%socket_path, "echo %s; bash"%message ], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
	line = p.stdout.readline().decode("UTF-8").strip()
	if line!=message: return p, 1
	else: return p, p.poll()

def check(output):
	if output==None or (type(output) is int and output!=0):
		print("ERROR")
		print("Please make sure the user you logged in with is able to run docker commands.")
		sys.exit(1)
	else:
		print("DONE")

def partition_images(remote, local):
	new = []
	need_update = []
	current = []
	for remote_name_tag, remote_ID in remote:
		found = False
		for local_name_tag, local_ID in local:
			if remote_name_tag==local_name_tag:
				found = True
				if remote_ID!=local_ID: need_update.append( local_name_tag )
				else: current.append( local_name_tag )
		if not found:
			new.append( remote_name_tag )

	return new, need_update, current

def get_remote_images(remote, socket_path):
	output, result = execute(["ssh", remote, "-o", "ControlPath=%s"%socket_path, "docker", "images", "--no-trunc"] )
	if result!=0: return
	output = [line.strip().split() for line in output if line.strip()!=""][1:]
	return [("%s:%s"%(image[0], image[1]), image[2]) for image in output if image[0]!="<none>"]

def get_local_images():
	output, result = execute("docker images --no-trunc")
	if result!=0: return
	output = [line.strip().split() for line in output if line.strip()!=""][1:]
	return [("%s:%s"%(image[0], image[1]), image[2]) for image in output]

def parse_args():
	parser = argparse.ArgumentParser(description='Synchronize docker images over the network.')
	parser.add_argument('remote', type=str, help='The remote host to sync the images with.')
	parser.add_argument('images', type=str, nargs='*', help='The images you want to sync. Use format image:tag.')
	parser.add_argument('-a', "--all", dest="all",  action="store_true", default=False, help='Synchronize all the images.')
	parser.add_argument('-r', "--report", dest="report",  action="store_true", default=False, help='Show the status of all the images.')
	parser.add_argument('-u', "--update", dest="update",  action="store_true", default=False, help='Synchronize the images that need update.')
	parser.add_argument('-n', "--new", dest="new",  action="store_true", default=False, help='Synchronize the images that are new.')

	def folder(path):
		if os.path.isdir(path):	return os.path.abspath(path)
		else: raise argparse.ArgumentTypeError("The specified path is not a directory")

	parser.add_argument('-f', "--tmpfolder", dest="folder", type=folder, default="/tmp", help='The path to temporally put the image dumps. Defaults to /tmp.')

	return parser.parse_args()

def execute(command, print_output = False):
	if type(command) is str: parts = [s.strip() for s in command.split(" ")]
	else: parts = command

	p = subprocess.Popen(parts, stdout=subprocess.PIPE)
	output = []

	while True:
		if print_output:
			line = p.stdout.read(10).decode("UTF-8")
			sys.stdout.write(line)
			sys.stdout.flush()
		else:
			line = p.stdout.readline().decode("UTF-8")

		if len(line)==0: break
		output.append(line)

	return output, p.wait()

def get_image_parents(image, remote, socket_path):
	command = """
	parent=$(docker inspect %s | grep -Po \"(?<=\\\"Id\\\": \\\")[^\\\"]*\"  );
	while test $(echo $parent|wc -m) -eq 65;
	do
		echo $parent;
		parent=$(docker inspect ${parent} | grep -Po \"(?<=\\\"Parent\\\": \\\")[^\\\"]*\" );
	done;
	"""%image
	output, exit_val = execute(["ssh", remote, "-o", "ControlPath=%s"%socket_path, "bash", "-cl", "'"+command+"'"])
	return [ID.strip() for ID in output] if exit_val==0 else None

def get_all_images():
	output, exit_val = execute("docker images -qa --no-trunc")
	return [ID.strip() for ID in output] if exit_val==0 else None

def get_common_parent(remote_parents, local_images):
	for ID in remote_parents:
		if ID in local_images: return ID

if __name__ == '__main__':
	main()